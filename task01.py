# Для СЛАУ с некоторой матрицей A:
# вычислить числа обусловленности;
# поварьировав матрицу и правую часть (например, на 10−2..10−10 ),
# вычислить |x − x̃|;
# посмотреть, есть ли корреляция между
# величинами чисел обусловленности и погрешностью решения.

# Для тестов можно брать:
# матрицы Гильберта разного порядка (например, от 3 до 10);
# системы из методички А.Н.Пакулиной, часть 1;
# какие-нибудь хорошие матрицы
# (например, трехдиагональные с диагональным преобладанием).
#
# Статья, в которой предлагается метод подсчёта углового числа обусловленности
# https://www.elibrary.ru/download/elibrary_15524850_60661752.pdf

from common_lib import print_task, print_test
from task01_lib import *


def test(A: np.array, b: np.array):
    print_cond(compute_cond_s(A), "spectre")
    print_cond(compute_cond_v(A), "volume")
    print_cond(compute_cond_a(A), "angle")
    X = np.linalg.solve(A, b)
    delta = 10**(-4)
    A_ = build_variated(A, delta)
    X_ = np.linalg.solve(A_, b)
    print_diff(X, X_, delta)


print_task(1)

# матрица Гильберта
A = build_hilbert(3)
b = np.array([1 for i in range(3)])
print_test("Гильберта 3-го порядка")
test(A, b)

# матрица Гильберта
A = build_hilbert(6)
b = np.array([1 for i in range(6)])
print_test("Гильберта 6-го порядка")
test(A, b)

# матрица Гильберта
A = build_hilbert(10)
b = np.array([1 for i in range(10)])
print_test("Гильберта 10-го порядка")
test(A, b)

# матрица из Пакулиной, стр. 90, вар. 1
A = np.array([[-400.60, 199.80],
              [1198.80, -600.40]])
b = np.array([200, -600])
print_test()
test(A, b)

# матрица из Пакулиной, стр. 94, вар. 1
A = np.array([[3.278164, 1.046583, -1.378574],
              [1.046583, 2.975937, 0.934251],
              [-1.378574, 0.934251, 4.836173]])
b = np.array([-0.527466, 2.526877, 5.165441])
print_test()
test(A, b)

# матрица трёхдиагональная
A = np.array([[1, 12, 0, 0, 0],
              [13, 14, 5, 0, 0],
              [0, 0, 16, 0, 0],
              [0, 0, 7, 18, 1/9],
              [0, 0, 0, 0, 10]])
b = np.array([1, 1, 1, 1, 1])
print_test("Трёхдиагональная")
test(A, b)

# матрица трёхдиагональная
A = np.array([[1, 12, 0, 0, 0, 0, 0],
              [13, 14, 5, 0, 0, 0, 0],
              [0, 0, 16, 88, 0, 0, 0],
              [0, 0, 11, 9, 0, 0, 0],
              [0, 0, 0, 1/7, 77, 7, 0],
              [0, 0, 0, 0, 1, 1/9, 1],
              [0, 0, 0, 0, 0, 0, 999]])
b = np.array([1, 1, 1, 1, 1, 1, 1])
print_test("Трёхдиагональная")
test(A, b)
