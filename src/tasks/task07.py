# Визуализация
#
# Отображение на графике зависимости погрешности от h (или от N ∼ h1 ).
# Поскольку асимптотика погрешности степенная, то рекомендуется использовать двойной логарифмический масштаб:
# log10 N — по оси абсцисс, log10 ||Δ|| — по оси ординат.
# При увеличении N должен быть выход на асимптотику ⇔ приближение к линиям с наклоном tg(α) = −p.
# Если на графике четкий выход на теоретический наклон, то останавливаемся, достигнув точности ε.
# На подробных сетках погрешность может перестать убывать ⇔ расчет вышел на ошибки округления.
import json
from src.tasks.common_lib import *
from src.tasks.task07_lib import *


def situation():
    return ["Реализовать решение ОДУ сеточным методом.",
            "Уравнения с граничными условиями для тестирования можно взять в методичке А.Н.Пакулиной, часть 2, стр. 11 и далее.",
            "Можно построить уравнение самостоятельно, взяв известное u(x). (и тут сразу будет ясно, к какому ответу нужно прийти)",
            "Начинать вычисления с грубой сетки (примерно 10 интервалов); измельчать сетку и уточнять по Ричардсону.",
            "В идеале — до момента выхода на ошибки округления.",
            "Отследить, какая точность (например, от 10−2 до 10−6 ) достигнута при каком шаге сетки. Выводить полученное приближение. Можно на картинке."]


def calc_answer(params: dict):
    A = np.array(params['A'])
    epsilon = float(params['epsilon'])

    answer = {
    }
    return json.dumps(answer, ensure_ascii=False)


def main():
    print_task(7)

    print(calc_answer({"A": A, "epsilon": epsilon}))


if __name__ == '__main__':
    main()
